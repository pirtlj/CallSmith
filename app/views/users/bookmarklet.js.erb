/* CallSmith */
window.CallSmith = window.CallSmith || {	
	/* Instance Fields */
	
	_this: null,
	contacts: [],
	currentContactIndex: -1,
		
	
	/* Util */
	
	Util: {
		/* Instance Fields */
		_this: null,
		$: null, //jQuery
		phoneNumberRegex: <%=Contact.phone_regex%>,
		
		/* Methods */
		
		/* Debug */
		Debug: {
			active: <%= Rails.env.development? || Rails.env.dev?  ? "true" : "false"%>,

			log: function(message){
				if (this.active){
					console.log(new Date().getTime() + " " + message);
				}
			},

			alert: function(message){
				if (this.active){
					alert(message);
				}
			},
		},

		init: function(callback){
			_this = this;
			
			_this.Debug.log("CallSmith.Util.init();");
			
			_this.loadCss("<%=root_url() + asset_path("contacts.css")[1..-1] %>", function(){});
			
			_this.loadScript("<%=root_url() + asset_path("jquery.js")[1..-1] %>", function(){
				_this.Debug.log("CallSmith.Util.init(); : 'jQuery Active'");
		     	_this.$ = jQuery.noConflict();
		
		
		
				//TODO make this work in the case where we load more than one js file that we depend on -JosephP
				if(callback){
					callback();
				}
		
				//Extend jQuery filters to user regx
				//http://james.padolsey.com/javascript/regex-selector-for-jquery/
			});
		},
		
		regexSearch: function(searchText, searchNode, callback){
			
			if (!searchText) {
				// Throw error here if you want...
				return;
			}
			var regex = typeof searchText === 'string' ? new RegExp(searchText, 'g') : searchText,
			childNodes = (searchNode || document.body).childNodes,
			cnLength = childNodes.length,
			excludes = 'html,head,style,title,link,meta,script,object,iframe';
			while (cnLength--) {
				var currentNode = childNodes[cnLength];
				if (currentNode.nodeType === 1 && (excludes + ',').indexOf(currentNode.nodeName.toLowerCase() + ',') === -1) {
					arguments.callee(searchText, currentNode, callback);
				}
				if (currentNode.nodeType !== 3 || !regex.test(currentNode.data) ) {
					continue;
				}
				if(callback){
					callback(currentNode, currentNode.data.match(regex));
				}
			}
		},
		
		loadScript: function(src, callback){
			_this = this;
			_this.Debug.log("CallSmith.Util.loadScript();");
						
			var head= document.getElementsByTagName('head')[0];
			var script= document.createElement('script');

			script.onreadystatechange = function (){
				if (this.readyState == 'complete'){
					_this.Debug.log("CallSmith.Util.loadScript(); : '" + src + "  Loaded'");
					callback();
				}
			}
			script.onload = function(){
				_this.Debug.log("CallSmith.Util.loadScript(); : '" + src + "  Loaded'");
				callback();
			}
			
			script.type	= 'text/javascript';
			script.src	= src;
			
			head.appendChild(script);
		},
		
		loadCss: function(src, callback){
			_this = this;
			_this.Debug.log("CallSmith.Util.loadCss();");
						
			var head = document.getElementsByTagName('head')[0];
			var script = document.createElement('LINK');

			script.onreadystatechange = function (){
				if (this.readyState == 'complete'){
					_this.Debug.log("CallSmith.Util.loadCss(); : '" + src + "  Loaded'");
					callback();
				}
			}
			script.onload = function(){
				_this.Debug.log("CallSmith.Util.loadCss(); : '" + src + "  Loaded'");
				callback();
			}
			
			script.rel 	= "stylesheet";
			script.type = "text/css";
			script.href = src;
			
			head.appendChild(script);
		}
		
	},
	
	
	/* Methods */
	
	Contact: function(){
		this.node = null;
		this.phoneNumber = null;
	},

	init: function(){
		_this = this;
		_this.Util.init(_this.onLoad);
	},
	
	onLoad: function(){
		CallSmith.Util.Debug.log("CallSmith.onLoad();");
		
		CallSmith.Util.regexSearch(<%=Contact.phone_regex%>, null, function(node, text){
			var contact = new CallSmith.Contact();
			contact.node = node;
			contact.phoneNumber = text;
			
			CallSmith.contacts.push(contact);
		});
		
		CallSmith.contacts.reverse();
		
		CallSmith.nextContact();
		CallSmith.render();		
	},
	
	nextContact: function(){
		CallSmith.Util.Debug.log("CallSmith.nextContact();");
		
		CallSmith.Util.Debug.log("CallSmith.nextContact(); : index = " + CallSmith.currentContactIndex);
		
		CallSmith.currentContactIndex +=  (CallSmith.currentContactIndex + 1 < CallSmith.contacts.length) ? 1 : 0;
		
		CallSmith.Util.Debug.log("CallSmith.nextContact(); : index = " + CallSmith.currentContactIndex); 
	},
	
	previousContact: function(){
		CallSmith.Util.Debug.log("CallSmith.previousContact();");
		
		CallSmith.currentContactIndex -=  (CallSmith.currentContactIndex > 0) ? 1 : 0; 
		
		CallSmith.Util.Debug.log("CallSmith.nextContact(); : index = " + CallSmith.currentContactIndex);
	},
	
	getCurrentContact: function(){
		CallSmith.Util.Debug.log("CallSmith.currentContact();");
			
		return CallSmith.contacts[CallSmith.currentContactIndex]
	},
	
	render: function(){
		CallSmith.Util.Debug.log("CallSmith.render();");
		
		CallSmith.Util.$(document.body).append(CallSmith.headerHtml);
	},
		
	headerHtml: function(){
		
		return	[
				"<div class='CallSmith-header'>",
					CallSmith.contacts.length + " contacts found.",
					"Number: ",
					"<input id='contact_phone_number' maxlength='255' name='contact[phone_number]' placeholder='Phone Number' type='text' class='' value='"+ CallSmith.getCurrentContact().phoneNumber + "'>",
					"<input id='contact_first_name' maxlength='255' name='contact[first_name]' placeholder='First Name' type='text' class=''>",
					"<input id='contact_last_name' maxlength='255' name='contact[last_name' placeholder='Last Name' type='text' class=''>",
					"THIS IS THE CALLSMITH HEADER",
				"</div>"
				].join('\n');
	},
}


window.CallSmith.init();
window.CallSmith.Util.Debug.log("CallSmith Loaded");

var xmlHttp = null;

function HighlightNumber(phone_nuber, currentNode)
{
	var Url = "<%=new_user_contact_url(current_user)%>?auth_token=<%=current_user.authentication_token%>&phone_number=" + phone_nuber;

	var xmlhttp = new XMLHttpRequest();

	xmlhttp.onreadystatechange = function()
	{
		var innerHtml = 
		   ["<span class='contact-wrap'>",	
				"<div class='colapse-button' onclick='toggleClass(this.parentNode, \"open\")'></div>",
				"<div>Call: " + phone_nuber + "</div>",
				xmlhttp.responseText,
			"</span>"
		   ].join('\n');
		

		if (xmlhttp.readyState==4 && xmlhttp.status==200)
		{
			var parent = currentNode.parentNode,
			frag = (function(){
				var html = innerHtml,
				wrap = document.createElement('span'),
				frag = document.createDocumentFragment();
				wrap.innerHTML = html;
				
				while (wrap.firstChild) {
					frag.appendChild(wrap.firstChild);
				}
				
				return frag;
			})();
				
			parent.insertBefore(frag, currentNode);
			parent.removeChild(currentNode);
		
		}
	}
		
	xmlhttp.open("GET",Url,true);
	xmlhttp.send();
}




function toggleClass(elm, className) {
	if (elm.className.indexOf(className) != -1){
		elm.className = elm.className.replace(className, "");
	}else{
		elm.className += (" " + className);
	}
}

function saveContactForm(){
	document.getElementById("new_contact").submit();	
}
